import asyncio
import base64
import logging
import os
import traceback
from typing import Dict, Any
import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ContentType, ParseMode
from aiogram.filters import Command
from aiogram.types import Message, ErrorEvent
from decouple import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = config("BOT_TOKEN")
MODEL_API_URL = config("LOCAL_MODEL_API_URL")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
user_data = {}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_handler(message: Message):
    try:
        logger.info(f"üöÄ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        welcome_text = """
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!</b>

–Ø –º–æ–≥—É:
‚Ä¢ üì∑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ OCR
‚Ä¢ üìÑ –ò–∑–≤–ª–µ–∫–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–æ–≤
‚Ä¢ üß† –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é AI

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å:</b>
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF —Ñ–∞–π–ª
2. –Ø –∏–∑–≤–ª–µ–∫—É –∏–∑ –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç
3. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
4. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç!

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
1. /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
2. /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º
3. /restart - –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
4. /ask - –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏
        """
        await message.answer(welcome_text)
        logger.info(f"‚úÖ /start —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è {message.from_user.id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start: {e}\n{traceback.format_exc()}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start")


# –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def cmd_help(message: Message):
    try:
        logger.info(f"üÜò /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        help_text = """
<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>

1. <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª</b> - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (jpg, png) –∏–ª–∏ PDF
2. <b>–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏</b> - —è –∏–∑–≤–µ–ª–∫—É —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OCR
3. <b>–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å</b> - –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
4. <b>–ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç</b> - AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: JPG, PNG, JPEG, BMP, TIFF
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã: PDF
        """
        await message.answer(help_text)
        logger.info(f"‚úÖ /help —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è {message.from_user.id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /help: {e}\n{traceback.format_exc()}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /help")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /restart
@dp.message(Command("restart"))
async def clear_handler(message: Message):
    user_id = message.from_user.id
    logger.info(f"üîÑ /restart –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    try:
        if user_id in user_data:
            old_files_count = len(user_data[user_id]["files"])
            old_texts_count = len(user_data[user_id]["texts"])
            user_data[user_id] = {"texts": [], "files": []}
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã –¥–ª—è {user_id}: –±—ã–ª–æ {old_files_count} —Ñ–∞–π–ª–æ–≤, {old_texts_count} —Ç–µ–∫—Å—Ç–æ–≤")
            await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")
        else:
            user_data[user_id] = {"texts": [], "files": []}
            logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {user_id}")
            await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /restart: {e}\n{traceback.format_exc()}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ask
@dp.message(Command("ask"))
async def ask_handler(message: Message):
    user_id = message.from_user.id
    logger.info(f"‚ùì /ask –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    try:
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if user_id not in user_data:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª—ã.")
            return

        files_count = len(user_data[user_id]["files"])
        texts_count = len(user_data[user_id]["texts"])

        logger.debug(f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {files_count} —Ñ–∞–π–ª–æ–≤, {texts_count} —Ç–µ–∫—Å—Ç–æ–≤")

        if files_count == 0 and texts_count == 0:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
            await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª—ã.")
            return

        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {user_id}")
        await process_query_local_api(message, user_id)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /ask: {e}\n{traceback.format_exc()}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–∞–π–ª–æ–≤ (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)
@dp.message(
    F.content_type.in_({
        ContentType.PHOTO,
        ContentType.DOCUMENT
    })
)
async def handle_files(message: Message):
    user_id = message.from_user.id
    logger.debug(f"üìé –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –æ—Ç {user_id}: —Ç–∏–ø={message.content_type}")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_data:
            user_data[user_id] = {"texts": [], "files": []}

        file_data, file_type, file_name = None, None, None

        if message.photo:
            file_id = message.photo[-1].file_id
            file_data, file_type, file_name = await download_file(file_id)
        elif message.document:
            file_id = message.document.file_id
            file_data, file_type, file_name = await download_file(file_id)

        if file_data and file_type:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            user_data[user_id]["files"].append({
                "name": file_name,
                "type": file_type,
                "data": base64.b64encode(file_data).decode('utf-8')
            })
            await message.answer(f"‚úÖ –§–∞–π–ª ({file_type}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /ask –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞")
            logger.debug(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è {user_id}, –≤—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(user_data[user_id]['files'])}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –æ—Ç {user_id}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_files: {e}\n{traceback.format_exc()}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)
@dp.message(F.content_type == ContentType.TEXT)
async def handle_text(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    if message.text.startswith('/'):
        logger.debug(f"‚ö° –ö–æ–º–∞–Ω–¥–∞ {message.text} –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥—Ä—É–≥–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É")
        return

    logger.debug(f"üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç {user_id}: {message.text[:50]}...")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_data:
            user_data[user_id] = {"texts": [], "files": []}

        user_data[user_id]["texts"].append(message.text)
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /ask –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞")
        logger.debug(f"üíæ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è {user_id}, –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤: {len(user_data[user_id]['texts'])}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_text: {e}\n{traceback.format_exc()}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞")


# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Telegram
async def download_file(file_id: str) -> tuple[bytes, str, str] | tuple[None, None, None]:
    try:
        logger.debug(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ {file_id}")
        file = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"

        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as response:
                if response.status != 200:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: —Å—Ç–∞—Ç—É—Å {response.status}")
                    return None, None, None

                file_data = await response.read()
                logger.debug(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(file_data)} –±–∞–π—Ç")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                file_extension = file.file_path.split('.')[-1].lower() if '.' in file.file_path else ''
                file_name = os.path.basename(file.file_path) if file.file_path else f"file_{file_id}.{file_extension}"

                if file_extension in ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'tiff', 'tif']:
                    file_type = "image"
                elif file_extension == 'pdf':
                    file_type = "pdf"
                else:
                    file_type = "document"

                logger.debug(f"üìÑ –¢–∏–ø —Ñ–∞–π–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫: {file_type}")
                return file_data, file_type, file_name

    except Exception as e:
        logger.error(f"Error downloading file: {e}\n{traceback.format_exc()}")
        return None, None, None


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
async def process_query_local_api(message: Message, user_id: int):
    try:
        logger.debug(f"process_query –Ω–∞—á–∞—Ç –¥–ª—è {user_id}")
        await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
        api_data = {
            "texts": user_data[user_id]["texts"],
            "files": user_data[user_id]["files"],
            "temperature": 0.7,
            "max_tokens": 2000
        }

        logger.debug(f"üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è API: {len(api_data['texts'])} —Ç–µ–∫—Å—Ç–æ–≤, {len(api_data['files'])} —Ñ–∞–π–ª–æ–≤")

        async with aiohttp.ClientSession() as session:
            response = await query_model_local_api(session, api_data)
            await send_response(message, response)

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
        user_data[user_id] = {"texts": [], "files": []}
        logger.info(f"üéâ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è {user_id}, –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_query: {e}\n{traceback.format_exc()}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏")


async def prepare_prompt(data: Dict[str, Any]) -> str:
    texts = data.get("texts", [])
    files = data.get("files", [])

    parts = []

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã
    if texts:
        if len(texts) == 1:
            parts.append(texts[0])
        else:
            for i, text in enumerate(texts, 1):
                parts.append(f"–¢–µ–∫—Å—Ç {i}:\n{text}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
    if files:
        files_info = ["–ü—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:"]
        for i, file_info in enumerate(files, 1):
            files_info.append(f"{i}. {file_info['name']} ({file_info['type']})")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–∞
            if file_info['type'] == 'image':
                files_info.append(f"   [–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä: {len(base64.b64decode(file_info['data']))} –±–∞–π—Ç]")
            elif file_info['type'] == 'pdf':
                files_info.append(f"   [PDF –¥–æ–∫—É–º–µ–Ω—Ç, —Ä–∞–∑–º–µ—Ä: {len(base64.b64decode(file_info['data']))} –±–∞–π—Ç]")
        parts.append("\n".join(files_info))

    return "\n\n".join(parts)


async def query_model_local_api(session: aiohttp.ClientSession, data: dict) -> dict:
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    """
    try:
        logger.debug(f"üåê –ó–∞–ø—Ä–æ—Å –∫ LM Studio API")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö
        user_content = await prepare_prompt(data)

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è LM Studio API
        api_data = {
            "model": "local-model",
            "messages": [
                {
                    "role": "user",
                    "content": user_content
                }
            ],
            "temperature": data.get("temperature", 0.7),
            "max_tokens": data.get("max_tokens", 1000),
            "stream": False
        }

        logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {MODEL_API_URL}")

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        timeout = aiohttp.ClientTimeout(total=120)

        async with session.post(
                MODEL_API_URL,
                json=api_data,
                timeout=timeout
        ) as response:

            if response.status != 200:
                error_text = await response.text()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {response.status}, –æ—Ç–≤–µ—Ç: {error_text}")
                return {"text": f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: —Å—Ç–∞—Ç—É—Å {response.status}"}

            result = await response.json()
            logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã LM Studio
            if "choices" in result and len(result["choices"]) > 0:
                assistant_message = result["choices"][0].get("message", {})
                response_text = assistant_message.get("content", "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")

                return {
                    "text": response_text,
                    "full_response": result,
                    "usage": result.get("usage", {})
                }
            else:
                logger.warning("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç LM Studio")
                return {"text": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏"}

    except asyncio.TimeoutError:
        logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏")
        return {"text": "‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}
    except aiohttp.ClientConnectorError:
        logger.error("üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LM Studio")
        return {"text": "üîå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –º–æ–¥–µ–ª–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ LM Studio –∑–∞–ø—É—â–µ–Ω."}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ query_model_local_api: {e}\n{traceback.format_exc()}")
        return {"text": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –º–æ–¥–µ–ª–∏: {str(e)}"}


# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_response(message: Message, response_data: dict):
    try:
        text_response = response_data.get("text", "")

        # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è Telegram
        if len(text_response) > 4000:
            text_response = text_response[:4000] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"

        await message.answer(text_response)
        logger.debug("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_response: {e}\n{traceback.format_exc()}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è aiogram 3.x
@dp.error()
async def error_handler(event: ErrorEvent):
    logger.error(f"üí• –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {event.exception}\n{traceback.format_exc()}")
    return True


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
async def test_bot():
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
    try:
        me = await bot.get_me()
        logger.info(f"ü§ñ –ë–æ—Ç @{me.username} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LM Studio
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(MODEL_API_URL.replace('/v1/chat/completions', '/v1/models'),
                                       timeout=10) as response:
                    if response.status == 200:
                        logger.info("‚úÖ LM Studio –¥–æ—Å—Ç—É–ø–µ–Ω")
                    else:
                        logger.warning(f"‚ö†Ô∏è LM Studio –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        return False


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
    if not await test_bot():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
        return

    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø—É–ª–ª–∏–Ω–≥...")

    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–ª–ª–∏–Ω–≥–µ: {e}\n{traceback.format_exc()}")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}\n{traceback.format_exc()}")
