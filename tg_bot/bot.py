import asyncio
import aiohttp
import base64
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, BufferedInputFile
from aiogram.enums import ContentType, ParseMode
from aiogram.filters import Command
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "YOUR_BOT_TOKEN"
MODEL_API_URL = 'YOUR_DATASPHERE_API_ENDPOINT'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
user_data = {}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_handler(message: Message):
    welcome_text = """
        ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!</b>
        
        –Ø –º–æ–≥—É:
        ‚Ä¢ üì∑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OCR
        ‚Ä¢ üìÑ –ò–∑–≤–ª–µ–∫–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–æ–≤
        ‚Ä¢ üß† –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é AI
        
        <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å:</b>
        1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF —Ñ–∞–π–ª
        2. –Ø –∏–∑–≤–ª–µ–∫—É –∏–∑ –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç
        3. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞
        4. –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!
        
        –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
    """
    await message.answer(welcome_text)


@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = """
        <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>
        
        1. <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª</b> - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (jpg, png) –∏–ª–∏ PDF
        2. <b>–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏</b> - —è –∏–∑–≤–ª–µ–∫—É —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OCR
        3. <b>–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å</b> - –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        4. <b>–ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç</b> - AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        
        <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
        ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: JPG, PNG, JPEG, BMP, TIFF
        ‚Ä¢ –í–∏–¥–µ–æ: MP4, AVI, MOV, WEBM
        ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã: PDF
        
    """
    await message.answer(help_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.content_type.in_({ContentType.TEXT, ContentType.PHOTO, ContentType.VIDEO, ContentType.DOCUMENT}))
async def handle_message(message: Message):
    user_id = message.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {"texts": [], "files": []}

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    if message.text and not message.text.startswith('/'):
        user_data[user_id]["texts"].append(message.text)
        await message.answer("–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /ask –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    elif not message.text:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        file_data, file_type = None, None

        if message.photo:
            file_id = message.photo[-1].file_id
            file_data, file_type = await download_file(file_id)
        elif message.video:
            file_id = message.video.file_id
            file_data, file_type = await download_file(file_id)
        elif message.document:
            file_id = message.document.file_id
            file_data, file_type = await download_file(file_id)

        if file_data and file_type:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 –¥–ª—è API
            file_base64 = base64.b64encode(file_data).decode('utf-8')
            user_data[user_id]["files"].append({
                "data": file_base64,
                "type": file_type
            })
            await message.answer(f"–§–∞–π–ª ({file_type}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /ask –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞")
            print(len(user_data[user_id]["files"]))
            print(len(user_data[user_id]["texts"]))


# –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Command("restart"))
async def clear_handler(message: Message):
    user_id = message.from_user.id
    user_data[user_id] = {"texts": [], "files": []}
    await message.answer("–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")


# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Telegram
async def download_file(file_id: str) -> tuple[bytes, str] | tuple[None, None]:
    try:
        file = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"

        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as response:
                file_data = await response.read()

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                file_extension = file.file_path.split('.')[-1].lower()
                if file_extension in ['jpg', 'jpeg', 'png', 'gif']:
                    file_type = "image"
                elif file_extension in ['mp4', 'avi', 'mov', 'webm']:
                    file_type = "video"
                elif file_extension == 'pdf':
                    file_type = "pdf"
                else:
                    file_type = "unknown"

                return file_data, file_type

    except Exception as e:
        logging.error(f"Error downloading file: {e}")
        return None, None


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏
@dp.message(Command("ask"))
async def ask_handler(message: Message):
    user_id = message.from_user.id

    if user_id not in user_data or (not user_data[user_id]["texts"] and not user_data[user_id]["files"]):
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª—ã.")
        return

    await process_query(message, user_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏
async def process_query(message: Message, user_id: int):
    await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
    api_data = {
        "texts": user_data[user_id]["texts"],
        "files": user_data[user_id]["files"]
    }

    async with aiohttp.ClientSession() as session:
        response = await query_model(session, api_data)
        await send_response(message, response)

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    user_data[user_id] = {"texts": [], "files": []}


# –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ –Ω–∞ DataSphere
async def query_model(session: aiohttp.ClientSession, data: dict) -> dict:
    try:
        async with session.post(MODEL_API_URL, json=data) as response:
            return await response.json()
    except Exception as e:
        logging.error(f"API error: {e}")
        return {"text": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏"}


# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_response(message: Message, response_data: dict):
    text_response = response_data.get("text", "")
    image_data = response_data.get("image")

    if image_data:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if isinstance(image_data, str) and image_data.startswith('data:image'):
            image_data = image_data.split(',')[1]

        try:
            image_bytes = base64.b64decode(image_data)
            image_file = BufferedInputFile(image_bytes, filename="response.png")
            await message.answer_photo(photo=image_file, caption=text_response)
        except Exception as e:
            logging.error(f"Error decoding image: {e}")
            await message.answer(text_response)
    else:
        await message.answer(text_response)


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
