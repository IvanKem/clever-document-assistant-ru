import asyncio
import io
import aiohttp
import base64
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, ErrorEvent
from aiogram.enums import ContentType, ParseMode
from aiogram.filters import Command
import logging
import traceback
from PIL import Image
from inference_model import generate_answer
import fitz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
user_data = {}
user_size_data = {}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_handler(message: Message):
    try:
        logger.info(f"üöÄ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        welcome_text = """
ü§ñ <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –Ø –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!</b>

–Ø –º–æ–≥—É:
‚Ä¢ üì∑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OCR
‚Ä¢ üìÑ –ò–∑–≤–ª–µ–∫–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ PDF, JPG –∏ PNG —Ñ–∞–π–ª–æ–≤
‚Ä¢ üß† –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é AI

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å:</b>
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ PDF —Ñ–∞–π–ª—ã
2. –Ø –∏–∑–≤–ª–µ–∫—É –∏–∑ –Ω–∏—Ö —Ç–µ–∫—Å—Ç
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É
4. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç!

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
        """
        await message.answer(welcome_text)
        logger.info(f"‚úÖ /start —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è {message.from_user.id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start: {e}\n{traceback.format_exc()}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start")


@dp.message(Command("help"))
async def cmd_help(message: Message):
    try:
        logger.info(f"üÜò /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        help_text = """
<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>

1. <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã</b> - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (jpg, png) –∏–ª–∏ PDF
2. <b>–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏</b> - —è –∏–∑–≤–µ–ª–∫—É —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OCR
3. <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–æ–º</b> - –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
4. <b>–ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç</b> - –º–æ–¥–µ–ª—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: JPG, PNG, JPEG, BMP, TIFF
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã: PDF

<b>–ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ, –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ /restart</b>
        """
        await message.answer(help_text)
        logger.info(f"‚úÖ /help —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è {message.from_user.id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /help: {e}\n{traceback.format_exc()}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /help")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /restart
@dp.message(Command("restart"))
async def clear_handler(message: Message):
    user_id = message.from_user.id
    logger.info(f"üîÑ /restart –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    try:
        if user_id in user_data:
            del user_data[user_id]
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã –¥–ª—è {user_id}")
            await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
        else:
            logger.info(f"‚úÖ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É {user_id}")
            await message.answer("‚úÖ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /restart: {e}\n{traceback.format_exc()}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")


# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Telegram
async def download_file(file_id: str, user_id: str) -> tuple[bytes, str] | tuple[None, None]:
    try:
        logger.debug(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ {file_id}")
        file = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"

        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as response:
                if response.status != 200:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: —Å—Ç–∞—Ç—É—Å {response.status}")
                    return None, None, None

                file_data = await response.read()
                logger.debug(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(file_data)} –±–∞–π—Ç")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                file_extension = file.file_path.split('.')[-1].lower() if '.' in file.file_path else ''
                if file_extension in ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'tiff', 'tif']:
                    file_type = "image"
                elif file_extension == 'pdf':
                    file_type = "pdf"
                else:
                    file_type = "document"

                logger.debug(f"üìÑ –¢–∏–ø —Ñ–∞–π–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫: {file_type}, —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file.file_size}")
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–∫–∞—á–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—É–º–º–∞—Ä–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
                if user_id in user_size_data:
                    user_size_data[user_id] += file.file_size
                else:
                    user_size_data[user_id] = file.file_size

                return file_data, file_type

    except Exception as ex:
        logger.error(f"Error downloading file: {ex}\n{traceback.format_exc()}")
        return None, None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–∞–π–ª–æ–≤ (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)
@dp.message(
    F.content_type.in_({
        ContentType.PHOTO,
        ContentType.DOCUMENT
    })
)
async def handle_files(message: Message):
    user_id = message.from_user.id
    logger.debug(f"üìé –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –æ—Ç {user_id}: —Ç–∏–ø={message.content_type}")

    try:
        file_data, file_type = None, None

        if message.photo:
            file_id = message.photo[-1].file_id
            file_data, file_type = await download_file(file_id, user_id)
        elif message.document:
            file_id = message.document.file_id
            file_data, file_type = await download_file(file_id, user_id)

        if file_data and file_type:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
            if file_type not in ["image", "pdf"]:
                await message.answer(f"‚ùå –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF.")
                logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –æ—Ç {user_id}: {file_type}")
                return
            if user_id in user_data:
                file = {
                    "type": file_type,
                    "data": base64.b64encode(file_data).decode('utf-8')
                }
                user_data[user_id].append(file)
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª)
                user_data[user_id] = [{
                    "type": file_type,
                    "data": base64.b64encode(file_data).decode('utf-8')
                }]
            await message.answer(
                f"‚úÖ –§–∞–π–ª ({file_type}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.")
            logger.debug(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è {user_id}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –æ—Ç {user_id}")

    except Exception as ex:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_files: {ex}\n{traceback.format_exc()}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥) - –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø—Ä–æ–º–ø—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(F.content_type == ContentType.TEXT)
async def handle_text(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    if message.text.startswith('/'):
        logger.debug(f"‚ö° –ö–æ–º–∞–Ω–¥–∞ {message.text} –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥—Ä—É–≥–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É")
        return
    logger.debug(f"üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç {user_id}: {message.text[:50]}...")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
        if user_id not in user_data:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç —Ñ–∞–π–ª–∞")
            await message.answer("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF).")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        question = message.text

        if not question.strip():
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
            return

        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {user_id}")
        await process_query(message, user_id, question)

    except Exception as ex:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_text: {ex}\n{traceback.format_exc()}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_unsupported_types(message: Message):
    user_id = message.from_user.id
    content_type = message.content_type

    logger.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: —Ç–∏–ø={content_type}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    content_type_names = {
        ContentType.TEXT: "—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        ContentType.VIDEO: "–≤–∏–¥–µ–æ",
        ContentType.VOICE: "–≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        ContentType.VIDEO_NOTE: "–∫—Ä—É–∂–æ—á–∫–∏",
        ContentType.STICKER: "—Å—Ç–∏–∫–µ—Ä—ã",
        ContentType.AUDIO: "–∞—É–¥–∏–æ—Ñ–∞–π–ª—ã",
        ContentType.ANIMATION: "GIF-–∞–Ω–∏–º–∞—Ü–∏–∏",
        ContentType.CONTACT: "–∫–æ–Ω—Ç–∞–∫—Ç—ã",
        ContentType.LOCATION: "–≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏",
        ContentType.POLL: "–æ–ø—Ä–æ—Å—ã",
        ContentType.DICE: "–∫–æ—Å—Ç–∏",
    }

    content_name = content_type_names.get(content_type, "—ç—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π")

    unsupported_text = f"""‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ {content_name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF —Ñ–∞–π–ª, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º."""

    await message.answer(unsupported_text)
    logger.debug(f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏
async def process_query(message: Message, user_id: int, question: str):
    try:
        if user_size_data[user_id] >= 1048576:
            await message.answer("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω —Ä–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 1 –ú–±")
            await message.answer("–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            del user_size_data[user_id]
            del user_data[user_id]
            return

        logger.debug(f"üîß process_query –Ω–∞—á–∞—Ç –¥–ª—è {user_id}")
        await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª—ã
        prepare_data = []
        for file in user_data[user_id]:
            prepare_data.append((base64.b64decode(file['data']), file['type']))

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
        images, prompt = prepare_data_for_model(prepare_data, question)

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
        # answer = generate_answer(images, prompt)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # await send_response(message, answer)

        logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è {user_id}")

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        if user_id in user_data:
            del user_data[user_id]

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_query: {e}\n{traceback.format_exc()}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫ –∑–∞–ø—Ä–æ—Å—É –º–æ–¥–µ–ª–∏
def prepare_data_for_model(files: list[tuple[bytes, str]], question: str) -> tuple[list[Image.Image], str]:
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏.

    Args:
        files: –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ pdf —Ñ–∞–π–ª–æ–≤
        question: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Returns:
        tuple: (PIL.Image –æ–±—ä–µ–∫—Ç, —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞)
    """
    try:
        logger.debug("üõ†Ô∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏")
        images = []
        for file in files:
            if file[1] == "pdf":
                # # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                logger.debug("üìÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                pages = fitz.open(stream=file[0], filetype=file[1])
                if pages:
                    for page in range(len(pages)):
                        pix = pages.load_page(page).get_pixmap(dpi=200)
                        mode = "RGBA" if pix.alpha else "RGB"
                        image = Image.frombytes(mode, (pix.width, pix.height), pix.samples)
                        images.append(image)
                    logger.debug(f"‚úÖ PDF —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                else:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            else:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image = Image.open(io.BytesIO(bytes(file[0])))
                images.append(image)
                logger.debug(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä: {image.size}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        prompt = f"–í–æ–ø—Ä–æ—Å: {question}\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç."

        return images, prompt

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}\n{traceback.format_exc()}")
        raise


# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_response(message: Message, response_text: str):
    try:
        logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞: {response_text[:100]}...")
        await message.answer(response_text, parse_mode=None)
        logger.debug("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ —Ç–µ–∫—Å—Ç")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_response: {e}\n{traceback.format_exc()}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è aiogram 3.x
@dp.error()
async def error_handler(event: ErrorEvent):
    logger.error(f"üí• –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {event.exception}\n{traceback.format_exc()}")
    return True


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
async def test_bot():
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
    try:
        me = await bot.get_me()
        logger.info(f"ü§ñ –ë–æ—Ç @{me.username} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        return False


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
    if not await test_bot():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
        return
    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø—É–ª–ª–∏–Ω–≥...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–ª–ª–∏–Ω–≥–µ: {e}\n{traceback.format_exc()}")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}\n{traceback.format_exc()}")
